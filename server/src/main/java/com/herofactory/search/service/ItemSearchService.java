package com.herofactory.search.service;

import com.herofactory.inspecteditem.dto.InspectedItemDto;
import com.herofactory.search.document.ItemDocument;
import com.herofactory.search.repository.ItemSearchRepository;
import co.elastic.clients.elasticsearch._types.query_dsl.Query;
import co.elastic.clients.elasticsearch._types.query_dsl.QueryBuilders;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.elasticsearch.client.elc.NativeQuery;
import org.springframework.data.elasticsearch.core.ElasticsearchOperations;
import org.springframework.data.elasticsearch.core.SearchHit;
import org.springframework.stereotype.Service;
@Slf4j
@Service
@RequiredArgsConstructor
public class ItemSearchService {
    private final ElasticsearchOperations elasticsearchOperations;
    private final ItemSearchRepository itemSearchRepository;

    public List<ItemDocument> searchItems(String keyword, int pageNumber, int pageSize) {
        if (keyword == null || keyword.isBlank() || pageNumber < 0 || pageSize < 0) {
            return List.of();
        }

        Query query = QueryBuilders.bool()
                .should(
                        QueryBuilders.match()
                                .field("name")
                                .query(keyword)
                                .build()._toQuery(),
                        QueryBuilders.match()
                                .field("description")
                                .query(keyword)
                                .build()._toQuery(),
                        QueryBuilders.term()
                                .field("categoryName")
                                .value(keyword)
                                .build()._toQuery(),
                        QueryBuilders.term()
                                .field("tags")
                                .value(keyword)
                                .build()._toQuery()
                )
                .minimumShouldMatch("1")
                .build()._toQuery();

        NativeQuery searchQuery = NativeQuery.builder()
                .withQuery(query)
                .withPageable(PageRequest.of(pageNumber, pageSize))
                .build();

        return elasticsearchOperations.search(searchQuery, ItemDocument.class)
                .getSearchHits()
                .stream()
                .map(SearchHit::getContent)
                .toList();
    }

    public ItemDocument indexItem(InspectedItemDto inspectedItem) {
        return itemSearchRepository.save(toDocument(inspectedItem));
    }

    public static ItemDocument toDocument(InspectedItemDto inspectedItem) {
        return new ItemDocument(
                inspectedItem.getItemDto().getId(),
                inspectedItem.getItemDto().getName(),
                inspectedItem.getItemDto().getDescription(),
                inspectedItem.getItemDto().getPrice(),
                inspectedItem.getItemDto().getCategoryName(),
                inspectedItem.getAutoGeneratedTags(),
                inspectedItem.getItemDto().getCreatedAt()
        );
    }
}