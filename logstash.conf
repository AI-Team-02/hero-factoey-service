input {
    kafka {
        bootstrap_servers => "kafka1:19092,kafka2:19092,kafka3:19092"
        topics => ["access-log"]
        group_id => "logstash"
        consumer_threads => 3
        auto_offset_reset => "earliest"
        codec => "json"
        type => "tomcat-access"
    }
    kafka {
        bootstrap_servers => "kafka1:19092,kafka2:19092,kafka3:19092"
        topics => ["api-access-log"]
        group_id => "logstash"
        consumer_threads => 3
        auto_offset_reset => "earliest"
        codec => "json"
        type => "api-access"
    }
}

filter {
 if [type] == "tomcat-access" {
        grok {
            match => { "message" => "%{IPORHOST:client_ip} - - \[%{HTTPDATE:logged_at}\] \"%{WORD:http_method} %{URIPATH:request} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:bytes} %{NUMBER:duration} \"%{DATA:referrer}\" \"%{DATA:user_agent}\"" }
        }
        if "_grokparsefailure" in [tags]{
            drop {}
        }
        date {
            match => ["logged_at", "dd/MMM/yyyy:HH:mm:ss Z"]
            target => "logged_at"
        }
        mutate {
            remove_field => ["message"]
        }
    }

    if [type] == "api-access" {
        date {
            match => [ "loggedAt",  "dd/MMM/yyyy:HH:mm:ss Z" ]
            target => "logged_at"
        }

      geoip {
          source => "clientIp"
          target => "geoip"  # 위치 정보를 저장할 필드
          fields => ["city_name", "country_name", "country_code2", "continent_code", "region_name", "location"]
      }

        if [status] >= 400 {
            mutate {
                add_tag => ["error"]
            }
        }
    }
}

output {
    if [type] == "tomcat-access" {
        elasticsearch {
            hosts => ["elasticsearch:9200"]
            index => "access-log-%{+YYYY-MM-dd}"
        }
    }

    if [type] == "api-access" {
        elasticsearch {
            hosts => ["elasticsearch:9200"]
            index => "api-access-log-%{+YYYY-MM-dd}"
        }
    }
}